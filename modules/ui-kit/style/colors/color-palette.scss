/**
 * Ant-design color palette algorithm
 *
 * https://github.com/ant-design/ant-design-colors/blob/master/src/generate.ts
 */

$-hue-step: 2;
$-saturation-step: 16;
$-saturation-step2: 5;
$-brightness-step1: 5;
$-brightness-step2: 15;
$-light-color-count: 5;
$-dark-color-count: 4;

@function -bound01($n, $max) {
  $diff: abs($n - $max);
  @if $diff < 0.000001 {
    @return 1;
  }
  @return min($n, $max) / $max;
}

@function -hsv($color) {
  $r: -bound01(red($color), 255);
  $g: -bound01(green($color), 255);
  $b: -bound01(blue($color), 255);
  $max: max($r, $g, $b);
  $min: min($r, $g, $b);
  $h: $max;
  $s: $max;
  $v: $max;
  $d: $max - $min;
  $s: if($max == 0, 0, $d / $max);
  @if $max == $min {
    $h: 0; // achromatic
  } @else {
    @if $max == $r {
      $diff: if($g < $b, 6, 0);
      $h: ($g - $b) / $d + $diff;
    } @else if $max == $g {
      $h: ($b - $r) / $d + 2;
    } @else if $max == $b {
      $h: ($r - $g) / $d + 4;
    }
    $h: $h / 6;
  }
  @return (h: $h * 360, s: $s, v: $v);
}

@function -get-hue($hsv, $i, $is-light) {
  $h: map-get($hsv, h);
  $hue: 0;
  @if $h >= 60 and $h <= 240 {
    @if $is-light {
      $hue: $h - $-hue-step * $i;
    } @else {
      $hue: $h + $-hue-step * $i;
    }
  } @else {
    @if $is-light {
      $hue: $h + $-hue-step * $i;
    } @else {
      $hue: $h - $-hue-step * $i;
    }
  }
  @if $hue < 0 {
    $hue: $hue + 360;
  } @else if $hue >= 360 {
    $hue: $hue - 360;
  }
  @return round($hue);
}

@function -get-saturation($hsv, $i, $is-light) {
  $s: round(map-get($hsv, s) * 100);
  $saturation: 0;
  @if $is-light {
    $saturation: $s - $-saturation-step * $i;
  } @else if $i == $-dark-color-count {
    $saturation: $s + $-saturation-step;
  } @else {
    $saturation: $s + $-saturation-step2 * $i;
  }
  @if $saturation > 100 {
    $saturation: 100;
  }
  @if $is-light and $i == $-light-color-count and $saturation > 10 {
    $saturation: 10;
  }
  @if $saturation < 6 {
    $saturation: 6;
  }
  @return round($saturation);
}

@function -get-value($hsv, $i, $is-light) {
  $v: round(map-get($hsv, v) * 100);
  @if $is-light {
    @return $v + $-brightness-step1 * $i;
  } @else {
    @return $v - $-brightness-step2 * $i;
  }
}

@function -to-percentage($n) {
  @if $n <= 1 {
    @return $n * 100;
  }
  @return $n;
}

@function -hex($h, $s, $v) {
  $s: -to-percentage($s);
  $v: -to-percentage($v);
  $h: -bound01($h, 360) * 6;
  $s: -bound01($s, 100);
  $v: -bound01($v, 100);
  $i: floor($h);
  $f: $h - $i;
  $p: $v * (1 - $s);
  $q: $v * (1 - $f * $s);
  $t: $v * (1 - (1 - $f) * $s);
  $mod: $i % 6;
  $r: round(nth(($v, $q, $p, $p, $t, $v), $mod + 1) * 255);
  $g: round(nth(($t, $v, $v, $q, $p, $p), $mod + 1) * 255);
  $b: round(nth(($p, $p, $t, $v, $v, $q), $mod + 1) * 255);
  @return change-color(#ffffff, $red: $r, $green: $g, $blue: $b);
}

@function color-palette($color, $index) {
  $is-light: if($index <= 6, true, false);
  $hsv: -hsv($color);
  $i: if($is-light, $-light-color-count + 1 - $index, $index - $-light-color-count - 1);
  $h: -get-hue($hsv, $i, $is-light);
  $s: -get-saturation($hsv, $i, $is-light);
  $v: -get-value($hsv, $i, $is-light);
  @return -hex($h, $s, $v);
}
